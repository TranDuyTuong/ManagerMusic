// <auto-generated />
using System;
using DataMigration.DataEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataMigration.Migrations
{
    [DbContext(typeof(ContextDB))]
    partial class ContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DataTable.Table.Account.T_ActiverAccount", b =>
                {
                    b.Property<int>("IdAccountActiver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAccountActiver")
                        .IsRequired()
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IdAccountActiver");

                    b.ToTable("ActiverAccounts");

                    b.HasData(
                        new
                        {
                            IdAccountActiver = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 970, DateTimeKind.Utc).AddTicks(4083),
                            NameAccountActiver = "Hoạt Động"
                        },
                        new
                        {
                            IdAccountActiver = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 970, DateTimeKind.Utc).AddTicks(4580),
                            NameAccountActiver = "Đang Bị Khóa"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Account.T_Login", b =>
                {
                    b.Property<Guid>("IdLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLogin")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSignout")
                        .HasColumnType("datetime2");

                    b.HasKey("IdLogin");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("DataTable.Table.Address.T_City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameCity")
                        .IsRequired()
                        .HasColumnType("Nvarchar(300)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCity");

                    b.ToTable("Citys");

                    b.HasData(
                        new
                        {
                            IdCity = 1,
                            AreaCode = 28,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 962, DateTimeKind.Utc).AddTicks(6633),
                            NameCity = "Thành Phố Hồ Chí Mình",
                            Status = true,
                            Symbol = "SG"
                        },
                        new
                        {
                            IdCity = 2,
                            AreaCode = 24,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 962, DateTimeKind.Utc).AddTicks(8374),
                            NameCity = "Thủ Đô Hà Nội",
                            Status = true,
                            Symbol = "HN"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Address.T_District", b =>
                {
                    b.Property<int>("IdDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCity")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameDistrict")
                        .IsRequired()
                        .HasColumnType("Nvarchar(300)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdDistrict");

                    b.HasIndex("IdCity");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            IdDistrict = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 964, DateTimeKind.Utc).AddTicks(5088),
                            IdCity = 1,
                            Identifier = "28_Q1",
                            NameDistrict = "Quận 1",
                            Status = true
                        });
                });

            modelBuilder.Entity("DataTable.Table.Comment.T_AnswerComment", b =>
                {
                    b.Property<int>("IdAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentAnswer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("Nvarchar(500)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdComment")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdAnswer");

                    b.HasIndex("IdComment");

                    b.HasIndex("IdUser");

                    b.ToTable("AnswerComments");
                });

            modelBuilder.Entity("DataTable.Table.Comment.T_CommentMusic", b =>
                {
                    b.Property<int>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentComment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("Nvarchar(500)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdMusic")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdComment");

                    b.HasIndex("IdMusic");

                    b.HasIndex("IdUser");

                    b.ToTable("CommentMusics");
                });

            modelBuilder.Entity("DataTable.Table.Dowload.T_DowloadMusic", b =>
                {
                    b.Property<int>("IdDowload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdMusic")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("Nvarchar(450)");

                    b.HasKey("IdDowload");

                    b.HasIndex("IdMusic");

                    b.ToTable("DowloadMusics");
                });

            modelBuilder.Entity("DataTable.Table.Gender.T_Gender", b =>
                {
                    b.Property<int>("IdGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameGender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar(100)");

                    b.HasKey("IdGender");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            IdGender = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 964, DateTimeKind.Utc).AddTicks(7974),
                            NameGender = "Nam"
                        },
                        new
                        {
                            IdGender = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 964, DateTimeKind.Utc).AddTicks(8282),
                            NameGender = "Nữ"
                        },
                        new
                        {
                            IdGender = 3,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 964, DateTimeKind.Utc).AddTicks(8286),
                            NameGender = "Giới Tính Khác"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Like.T_LikeMusic", b =>
                {
                    b.Property<int>("IdLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateLike")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdMusic")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LikeStatus")
                        .HasColumnType("bit");

                    b.HasKey("IdLike");

                    b.HasIndex("IdMusic");

                    b.HasIndex("IdUser");

                    b.ToTable("LikeMusics");
                });

            modelBuilder.Entity("DataTable.Table.Marriage.T_Marriage", b =>
                {
                    b.Property<int>("IdMarriage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameMarriage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IdMarriage");

                    b.ToTable("Marriages");

                    b.HasData(
                        new
                        {
                            IdMarriage = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 964, DateTimeKind.Utc).AddTicks(9616),
                            NameMarriage = "Độc Thân"
                        },
                        new
                        {
                            IdMarriage = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 964, DateTimeKind.Utc).AddTicks(9916),
                            NameMarriage = "Đã Kết Hôn"
                        },
                        new
                        {
                            IdMarriage = 3,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 964, DateTimeKind.Utc).AddTicks(9919),
                            NameMarriage = "Đã Ly Hôn"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Music.T_FileMusic", b =>
                {
                    b.Property<int>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("DataFieImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("DataFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdMusic")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFile")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFile");

                    b.HasIndex("IdMusic");

                    b.ToTable("FileMusics");
                });

            modelBuilder.Entity("DataTable.Table.Music.T_Music", b =>
                {
                    b.Property<Guid>("IdMusic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorMusic")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSaints")
                        .HasColumnType("int");

                    b.Property<int>("IdSeason")
                        .HasColumnType("int");

                    b.Property<string>("IdStaff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdStatusMusic")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("NameMusic")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("Nvarchar(500)");

                    b.Property<string>("NoMusic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdMusic");

                    b.HasIndex("IdSaints");

                    b.HasIndex("IdSeason");

                    b.HasIndex("IdStatusMusic");

                    b.HasIndex("IdUser");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("DataTable.Table.Music.T_StatusMusic", b =>
                {
                    b.Property<int>("IdStatusMusic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameStatusMusic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar(100)");

                    b.HasKey("IdStatusMusic");

                    b.ToTable("StatusMusics");

                    b.HasData(
                        new
                        {
                            IdStatusMusic = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(1054),
                            NameStatusMusic = "Đang Hoạt Động"
                        },
                        new
                        {
                            IdStatusMusic = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(1370),
                            NameStatusMusic = "Ngưng Hoạt Động"
                        },
                        new
                        {
                            IdStatusMusic = 3,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(1374),
                            NameStatusMusic = "Đã Xóa"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Music.T_UpdateMusic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuthorNew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorOld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNameNew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileNameOld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdMusic")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdSaintNew")
                        .HasColumnType("int");

                    b.Property<int>("IdSaintOld")
                        .HasColumnType("int");

                    b.Property<int>("IdSeasonNew")
                        .HasColumnType("int");

                    b.Property<int>("IdSeasonOld")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameMuiscNew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameMusicOld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("T_UpdateMusics");
                });

            modelBuilder.Entity("DataTable.Table.QRcode.T_ImageQRCore", b =>
                {
                    b.Property<int>("IdQRcore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdMusic")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TitleImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("Nvarchar(500)");

                    b.HasKey("IdQRcore");

                    b.HasIndex("IdMusic");

                    b.ToTable("ImageQRCores");
                });

            modelBuilder.Entity("DataTable.Table.Rating.T_Rating", b =>
                {
                    b.Property<int>("IdRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdMusic")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("IdRating");

                    b.HasIndex("IdMusic");

                    b.HasIndex("IdUser");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_AnswerGmailRequestPassword", b =>
                {
                    b.Property<int>("IdAnswerGmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentAnswer")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<DateTime>("DateAnswer")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRequestPassword")
                        .HasColumnType("int");

                    b.Property<string>("IdStaff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.Property<string>("TitleAnswer")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("Nvarchar(450)");

                    b.HasKey("IdAnswerGmail");

                    b.HasIndex("IdRequestPassword");

                    b.ToTable("AnswerGmailRequestPasswords");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_AnswerRequest", b =>
                {
                    b.Property<int>("IdAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentSent")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRead")
                        .HasColumnType("int");

                    b.Property<int>("IdRequest")
                        .HasColumnType("int");

                    b.Property<string>("IdStaff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTypeSent")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleSent")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("Nvarchar(450)");

                    b.HasKey("IdAnswer");

                    b.HasIndex("IdRead");

                    b.HasIndex("IdRequest");

                    b.HasIndex("IdTypeSent");

                    b.HasIndex("IdUser");

                    b.ToTable("AnswerRequests");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_ReadUser", b =>
                {
                    b.Property<int>("IdRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReadContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRead");

                    b.ToTable("ReadUsers");

                    b.HasData(
                        new
                        {
                            IdRead = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(2517),
                            ReadContent = "Đã Đọc"
                        },
                        new
                        {
                            IdRead = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(2917),
                            ReadContent = "Chưa Đọc"
                        });
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_ReceiveRequest", b =>
                {
                    b.Property<int>("IdReceiveRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IdReceiveRequest");

                    b.ToTable("ReceiveRequests");

                    b.HasData(
                        new
                        {
                            IdReceiveRequest = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(4238),
                            Description = "Chưa Giải Quyết"
                        },
                        new
                        {
                            IdReceiveRequest = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(4523),
                            Description = "Đang Giải Quyết"
                        },
                        new
                        {
                            IdReceiveRequest = 3,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(4525),
                            Description = "Đã Giải Quyết"
                        });
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_RequestPassword", b =>
                {
                    b.Property<int>("IdRequestPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentRequest")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<DateTime?>("DateHandled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSuccess")
                        .HasColumnType("datetime2");

                    b.Property<string>("GmailRequest")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("IdReceiveRequest")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageRequest")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.Property<string>("TitleRequest")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("Nvarchar(500)");

                    b.Property<string>("TypeImg")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRequestPassword");

                    b.HasIndex("IdReceiveRequest");

                    b.ToTable("RequestPasswords");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_RequestUser", b =>
                {
                    b.Property<int>("IdRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentRequest")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<DateTime?>("DateHandled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSuccess")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdReceiveRequest")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypeSent")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleRequest")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IdRequest");

                    b.HasIndex("IdReceiveRequest");

                    b.HasIndex("IdUser");

                    b.ToTable("RequestUsers");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_TypeSentUser", b =>
                {
                    b.Property<int>("IdTypeSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasColumnType("Nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdTypeSent");

                    b.ToTable("TypeSentUsers");

                    b.HasData(
                        new
                        {
                            IdTypeSent = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(5609),
                            NameType = "Gửi Qua Gmail",
                            Status = true
                        },
                        new
                        {
                            IdTypeSent = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(6130),
                            NameType = "Gửi Qua Tin Nhắn Website",
                            Status = true
                        });
                });

            modelBuilder.Entity("DataTable.Table.Role.T_HistoryRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUserDecenRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HistoryRoles");
                });

            modelBuilder.Entity("DataTable.Table.Role.T_Role", b =>
                {
                    b.Property<Guid>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("Nvarchar(500)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdStatusRole")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Nvarchar(250)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolRole")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdRole");

                    b.HasIndex("IdStatusRole");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            IdRole = new Guid("99ef88a8-d94b-469e-bac0-39694b407976"),
                            ConcurrencyStamp = "d9ee8b44-73b3-45da-891b-54b18547b37d",
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(1207),
                            Description = "Nhân Viên",
                            Id = new Guid("99ef88a8-d94b-469e-bac0-39694b407976"),
                            IdStatusRole = 1,
                            Name = "Nhân Viên",
                            SymbolRole = "NV"
                        },
                        new
                        {
                            IdRole = new Guid("353f756f-ae8d-49b5-b922-9d54ca0b9c2d"),
                            ConcurrencyStamp = "4a4b6b57-3224-4413-8689-93e4757d013e",
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(1600),
                            Description = "Người Dùng",
                            Id = new Guid("353f756f-ae8d-49b5-b922-9d54ca0b9c2d"),
                            IdStatusRole = 1,
                            Name = "Người Dùng",
                            SymbolRole = "ND"
                        },
                        new
                        {
                            IdRole = new Guid("4fd681b6-5dd2-4a5a-aa9e-b2806c61d4ca"),
                            ConcurrencyStamp = "30da51f2-7670-42ef-8127-47ff5fefce8d",
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(1616),
                            Description = "Quản Lý",
                            Id = new Guid("4fd681b6-5dd2-4a5a-aa9e-b2806c61d4ca"),
                            IdStatusRole = 1,
                            Name = "Quản Lý",
                            SymbolRole = "AD"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Role.T_StatusRole", b =>
                {
                    b.Property<int>("IdStatusRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IdStatusRole");

                    b.ToTable("StatusRoles");

                    b.HasData(
                        new
                        {
                            IdStatusRole = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(7172),
                            NameStatus = "Hoạt Động"
                        },
                        new
                        {
                            IdStatusRole = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 965, DateTimeKind.Utc).AddTicks(7473),
                            NameStatus = "Ngưng Hoạt Động"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Role.T_UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateDecentralization")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdUser");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DataTable.Table.Saints.T_Saints", b =>
                {
                    b.Property<int>("IdSaints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdStaff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdStatusSaints")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameSaints")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("Nvarchar(500)");

                    b.Property<string>("TokenData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSaints");

                    b.HasIndex("IdStatusSaints");

                    b.ToTable("Saintes");

                    b.HasData(
                        new
                        {
                            IdSaints = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(4791),
                            IdStatusSaints = 1,
                            IdUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameSaints = "Lễ Đức Mẹ"
                        },
                        new
                        {
                            IdSaints = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(5132),
                            IdStatusSaints = 1,
                            IdUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameSaints = "Lễ Thánh GiuSe"
                        },
                        new
                        {
                            IdSaints = 3,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(5135),
                            IdStatusSaints = 1,
                            IdUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameSaints = "Lễ Các Thánh Tử Đạo "
                        },
                        new
                        {
                            IdSaints = 4,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(5138),
                            IdStatusSaints = 1,
                            IdUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameSaints = "Lễ Thánh Nữ"
                        },
                        new
                        {
                            IdSaints = 5,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(5140),
                            IdStatusSaints = 1,
                            IdUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameSaints = "Lễ Thánh Nam"
                        },
                        new
                        {
                            IdSaints = 6,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(5143),
                            IdStatusSaints = 1,
                            IdUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameSaints = "Lễ Chúa Thánh Thần"
                        },
                        new
                        {
                            IdSaints = 7,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(5145),
                            IdStatusSaints = 1,
                            IdUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameSaints = "Lễ Về Ơn Gọi"
                        },
                        new
                        {
                            IdSaints = 8,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(5148),
                            IdStatusSaints = 1,
                            IdUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameSaints = "Không thuộc lễ ngoại lịch"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Saints.T_StatusSaints", b =>
                {
                    b.Property<int>("IdIdStatusSaints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameStatusSaints")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IdIdStatusSaints");

                    b.ToTable("StatusSaintes");

                    b.HasData(
                        new
                        {
                            IdIdStatusSaints = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(2981),
                            NameStatusSaints = "Hoạt Động"
                        },
                        new
                        {
                            IdIdStatusSaints = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(3335),
                            NameStatusSaints = "Ngưng Hoạt Động"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Season.T_Season", b =>
                {
                    b.Property<int>("IdSeason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdStatusSeason")
                        .HasColumnType("int");

                    b.Property<string>("NameSeason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("Nvarchar(500)");

                    b.HasKey("IdSeason");

                    b.HasIndex("IdStatusSeason");

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            IdSeason = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(677),
                            IdStatusSeason = 1,
                            NameSeason = "Mùa Thường Niên"
                        },
                        new
                        {
                            IdSeason = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(1203),
                            IdStatusSeason = 1,
                            NameSeason = "Mùa Vọng"
                        },
                        new
                        {
                            IdSeason = 3,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(1208),
                            IdStatusSeason = 1,
                            NameSeason = "Mùa Giáng Sinh"
                        },
                        new
                        {
                            IdSeason = 4,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(1213),
                            IdStatusSeason = 1,
                            NameSeason = "Mùa Phục Sinh"
                        },
                        new
                        {
                            IdSeason = 5,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(1215),
                            IdStatusSeason = 1,
                            NameSeason = "Mùa Chay"
                        },
                        new
                        {
                            IdSeason = 6,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(1218),
                            IdStatusSeason = 1,
                            NameSeason = "Ngoại Lịch"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Season.T_StatusSeason", b =>
                {
                    b.Property<int>("IdStatusSeason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IdStatusSeason");

                    b.ToTable("StatusSeasons");

                    b.HasData(
                        new
                        {
                            IdStatusSeason = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(7876),
                            NameStatus = "Hoạt Động"
                        },
                        new
                        {
                            IdStatusSeason = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 966, DateTimeKind.Utc).AddTicks(8437),
                            NameStatus = "Ngưng Hoạt Động"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_FilePlan", b =>
                {
                    b.Property<int>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("ContentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlan")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFile");

                    b.ToTable("FilePlans");
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_HappyBirthdayStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentSent")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsStatusSent")
                        .HasColumnType("int");

                    b.Property<string>("TitleSent")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("IsStatusSent");

                    b.ToTable("HappyBirthdayStaffs");
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_NotificationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlan")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StatusView")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NotificationPlans");
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_PlanStaff", b =>
                {
                    b.Property<int>("IdPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AcceptPlan")
                        .HasColumnType("int");

                    b.Property<string>("ContentPlan")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<DateTime>("DateComplete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdStatusPlan")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUserPlan")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUserRequest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NamePlan")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<TimeSpan>("TimeComplete")
                        .HasColumnType("time");

                    b.Property<bool>("TimeUp")
                        .HasColumnType("bit");

                    b.HasKey("IdPlan");

                    b.ToTable("PlanStaffs");
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_StatusHappyBirthDayStaff", b =>
                {
                    b.Property<int>("IsStatusSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IsStatusSent");

                    b.ToTable("StatusHappyBirthDayStaffs");

                    b.HasData(
                        new
                        {
                            IsStatusSent = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(3807),
                            Description = "Gửi Thành Công"
                        },
                        new
                        {
                            IsStatusSent = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(4223),
                            Description = "Gửi Thất Bại"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_StatusPlan", b =>
                {
                    b.Property<int>("IdStatusPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameStauts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStatusPlan");

                    b.ToTable("StatusPlans");

                    b.HasData(
                        new
                        {
                            IdStatusPlan = 1,
                            NameStauts = "Hoàn Thành"
                        },
                        new
                        {
                            IdStatusPlan = 2,
                            NameStauts = "Hủy Bỏ"
                        },
                        new
                        {
                            IdStatusPlan = 3,
                            NameStauts = "Chưa Hoàn Thành"
                        },
                        new
                        {
                            IdStatusPlan = 4,
                            NameStauts = "Đang Thực Hiện"
                        },
                        new
                        {
                            IdStatusPlan = 5,
                            NameStauts = "Chưa Thực Hiện"
                        });
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_StatusStaffOff", b =>
                {
                    b.Property<int>("StatusStaffOff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("StatusStaffOff");

                    b.ToTable("StatusStaffOffs");

                    b.HasData(
                        new
                        {
                            StatusStaffOff = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(5803),
                            Description = "Còn Làm"
                        },
                        new
                        {
                            StatusStaffOff = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(6222),
                            Description = "Nghĩ Làm"
                        });
                });

            modelBuilder.Entity("DataTable.Table.User.T_BirthdayUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthdayUser")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContentSent")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StatusSent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("T_UsersIdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleSent")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("T_UsersIdUser");

                    b.ToTable("BirthdayUsers");
                });

            modelBuilder.Entity("DataTable.Table.User.T_ChatImageStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("IdChat")
                        .HasColumnType("int");

                    b.Property<string>("ImageBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatImageStaffs");
                });

            modelBuilder.Entity("DataTable.Table.User.T_ChatStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.HasKey("Id");

                    b.ToTable("ChatStaffs");
                });

            modelBuilder.Entity("DataTable.Table.User.T_DeleteNotification", b =>
                {
                    b.Property<int>("IdDeleteNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("Nvarchar(450)");

                    b.HasKey("IdDeleteNotification");

                    b.ToTable("DeleteNotifications");

                    b.HasData(
                        new
                        {
                            IdDeleteNotification = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(7463),
                            Description = "Chưa Xóa Thông Báo"
                        },
                        new
                        {
                            IdDeleteNotification = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 967, DateTimeKind.Utc).AddTicks(7849),
                            Description = "Đã Xóa Thông Báo"
                        });
                });

            modelBuilder.Entity("DataTable.Table.User.T_LeverUser", b =>
                {
                    b.Property<int>("IdLever")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionName")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.HasKey("IdLever");

                    b.ToTable("LeverUsers");

                    b.HasData(
                        new
                        {
                            IdLever = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 968, DateTimeKind.Utc).AddTicks(1385),
                            DescriptionName = "- Đây là cấp độ thấp nhất các tài khoản ở cấp độ này chỉ được phép dùng từ 1 đến 2 chức năng của hệ thống, đa số ở cấp độ này sẻ là người dùng là chủ yếu họ chỉ được thao tác các chức năng mà được cấp phép.",
                            Name = "Cấp Độ Đồng"
                        },
                        new
                        {
                            IdLever = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 968, DateTimeKind.Utc).AddTicks(1717),
                            DescriptionName = "- Đây là cấp độ ở mức trung bình không nhỏ cũng không lớn, đa số các tài khoản ở cấp độ này sẻ là các cộng tác viên được cấp độ vàng phân quyền cho, vì vậy với cấp độ bạc bạn sẻ bị hạn chế một vài chức năng của hệ thống mà bạn không được phép dùng.",
                            Name = "Cấp Độ Bạc"
                        },
                        new
                        {
                            IdLever = 3,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 968, DateTimeKind.Utc).AddTicks(1720),
                            DescriptionName = "- Đây là cấp độ lớn nhất của hệ thống, với cấp độ này thì được phép dùng tất cả chức năng có trong hệ thống, quản lý toàn bộ các cấp độ khác nhỏ hơn, quản trị toàn bộ dữ liệu thông tin của hệ thống.",
                            Name = "Cấp Độ Vàng"
                        });
                });

            modelBuilder.Entity("DataTable.Table.User.T_NotificationUser", b =>
                {
                    b.Property<int>("IdNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuthorNotification")
                        .IsRequired()
                        .HasColumnType("Nvarchar(250)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDeleteNotification")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdViewNotification")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleNotification")
                        .IsRequired()
                        .HasColumnType("Nvarchar(MAX)");

                    b.HasKey("IdNotification");

                    b.HasIndex("IdDeleteNotification");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdViewNotification");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("DataTable.Table.User.T_StaffOrUser", b =>
                {
                    b.Property<int>("IdStaffOrUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdStaffOrUser");

                    b.ToTable("StaffOrUsers");

                    b.HasData(
                        new
                        {
                            IdStaffOrUser = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 968, DateTimeKind.Utc).AddTicks(5552),
                            Description = "Người Dùng",
                            Status = true,
                            symbol = "ND"
                        },
                        new
                        {
                            IdStaffOrUser = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 968, DateTimeKind.Utc).AddTicks(6510),
                            Description = "Nhân Viên",
                            Status = true,
                            symbol = "NV"
                        });
                });

            modelBuilder.Entity("DataTable.Table.User.T_User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressSatff")
                        .HasMaxLength(500)
                        .HasColumnType("Nvarchar(500)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CancelHideStaff")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAccountBlock")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStaffOff")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("Nvarchar(250)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdAccountActiver")
                        .HasColumnType("int");

                    b.Property<int>("IdCity")
                        .HasColumnType("int");

                    b.Property<int>("IdDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IdGender")
                        .HasColumnType("int");

                    b.Property<int>("IdLever")
                        .HasColumnType("int");

                    b.Property<int?>("IdMarriage")
                        .HasColumnType("int");

                    b.Property<string>("IdStaff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdStaffOrUser")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageAvata")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("NameFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneStaff")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusStaffOff")
                        .HasColumnType("int");

                    b.Property<string>("TokenData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalChat")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TypeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WasView")
                        .HasColumnType("bit");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdUser");

                    b.HasIndex("IdAccountActiver");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdDistrict");

                    b.HasIndex("IdGender");

                    b.HasIndex("IdLever");

                    b.HasIndex("IdMarriage");

                    b.HasIndex("IdStaffOrUser");

                    b.HasIndex("StatusStaffOff");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataTable.Table.User.T_ViewNotification", b =>
                {
                    b.Property<int>("IdViewNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar(100)");

                    b.HasKey("IdViewNotification");

                    b.ToTable("ViewNotifications");

                    b.HasData(
                        new
                        {
                            IdViewNotification = 1,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 969, DateTimeKind.Utc).AddTicks(7648),
                            Description = "Đã Xem"
                        },
                        new
                        {
                            IdViewNotification = 2,
                            DateCreate = new DateTime(2023, 5, 29, 13, 54, 58, 970, DateTimeKind.Utc).AddTicks(1245),
                            Description = "Chưa Xem"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("DataTable.Table.Address.T_District", b =>
                {
                    b.HasOne("DataTable.Table.Address.T_City", "T_Cities")
                        .WithMany("T_Districts")
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Cities");
                });

            modelBuilder.Entity("DataTable.Table.Comment.T_AnswerComment", b =>
                {
                    b.HasOne("DataTable.Table.Comment.T_CommentMusic", "T_CommentMusics")
                        .WithMany("T_AnswerComments")
                        .HasForeignKey("IdComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_AnswerComments")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_CommentMusics");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Comment.T_CommentMusic", b =>
                {
                    b.HasOne("DataTable.Table.Music.T_Music", "T_Musics")
                        .WithMany("T_CommentMusics")
                        .HasForeignKey("IdMusic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_CommentMusics")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Musics");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Dowload.T_DowloadMusic", b =>
                {
                    b.HasOne("DataTable.Table.Music.T_Music", "T_Musics")
                        .WithMany("T_DowloadMusics")
                        .HasForeignKey("IdMusic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Musics");
                });

            modelBuilder.Entity("DataTable.Table.Like.T_LikeMusic", b =>
                {
                    b.HasOne("DataTable.Table.Music.T_Music", "T_Musics")
                        .WithMany("T_LikeMusics")
                        .HasForeignKey("IdMusic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_LikeMusics")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Musics");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Music.T_FileMusic", b =>
                {
                    b.HasOne("DataTable.Table.Music.T_Music", "T_Musics")
                        .WithMany("T_FileMusics")
                        .HasForeignKey("IdMusic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Musics");
                });

            modelBuilder.Entity("DataTable.Table.Music.T_Music", b =>
                {
                    b.HasOne("DataTable.Table.Saints.T_Saints", "T_Saintes")
                        .WithMany("T_Musics")
                        .HasForeignKey("IdSaints")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.Season.T_Season", "T_Seasons")
                        .WithMany("T_Musics")
                        .HasForeignKey("IdSeason")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.Music.T_StatusMusic", "T_StatusMusics")
                        .WithMany("T_Musics")
                        .HasForeignKey("IdStatusMusic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_Musics")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Saintes");

                    b.Navigation("T_Seasons");

                    b.Navigation("T_StatusMusics");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.QRcode.T_ImageQRCore", b =>
                {
                    b.HasOne("DataTable.Table.Music.T_Music", "T_Musics")
                        .WithMany("T_ImageQRCores")
                        .HasForeignKey("IdMusic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Musics");
                });

            modelBuilder.Entity("DataTable.Table.Rating.T_Rating", b =>
                {
                    b.HasOne("DataTable.Table.Music.T_Music", "T_Musics")
                        .WithMany("T_Ratings")
                        .HasForeignKey("IdMusic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_Ratings")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Musics");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_AnswerGmailRequestPassword", b =>
                {
                    b.HasOne("DataTable.Table.RequestUser.T_RequestPassword", "T_RequestPasswords")
                        .WithMany("T_AnswerGmailRequestPasswords")
                        .HasForeignKey("IdRequestPassword")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_RequestPasswords");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_AnswerRequest", b =>
                {
                    b.HasOne("DataTable.Table.RequestUser.T_ReadUser", "T_ReadUsers")
                        .WithMany("T_AnswerRequests")
                        .HasForeignKey("IdRead")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.RequestUser.T_RequestUser", "T_RequestUsers")
                        .WithMany("T_AnswerRequests")
                        .HasForeignKey("IdRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.RequestUser.T_TypeSentUser", "T_TypeSentUsers")
                        .WithMany("T_AnswerRequests")
                        .HasForeignKey("IdTypeSent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_AnswerRequests")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_ReadUsers");

                    b.Navigation("T_RequestUsers");

                    b.Navigation("T_TypeSentUsers");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_RequestPassword", b =>
                {
                    b.HasOne("DataTable.Table.RequestUser.T_ReceiveRequest", "T_ReceiveRequests")
                        .WithMany("T_RequestPasswords")
                        .HasForeignKey("IdReceiveRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_ReceiveRequests");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_RequestUser", b =>
                {
                    b.HasOne("DataTable.Table.RequestUser.T_ReceiveRequest", "T_ReceiveRequests")
                        .WithMany("T_RequestUsers")
                        .HasForeignKey("IdReceiveRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_RequestUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_ReceiveRequests");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Role.T_Role", b =>
                {
                    b.HasOne("DataTable.Table.Role.T_StatusRole", "T_StatusRoles")
                        .WithMany("T_Roles")
                        .HasForeignKey("IdStatusRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_StatusRoles");
                });

            modelBuilder.Entity("DataTable.Table.Role.T_UserRole", b =>
                {
                    b.HasOne("DataTable.Table.Role.T_Role", "T_Roles")
                        .WithMany("T_UserRoles")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_UserRoles")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_Roles");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Saints.T_Saints", b =>
                {
                    b.HasOne("DataTable.Table.Saints.T_StatusSaints", "T_StatusSaintes")
                        .WithMany("T_Saintes")
                        .HasForeignKey("IdStatusSaints")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_StatusSaintes");
                });

            modelBuilder.Entity("DataTable.Table.Season.T_Season", b =>
                {
                    b.HasOne("DataTable.Table.Season.T_StatusSeason", "T_StatusSeasons")
                        .WithMany("T_Seasons")
                        .HasForeignKey("IdStatusSeason")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_StatusSeasons");
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_HappyBirthdayStaff", b =>
                {
                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_HappyBirthdayStaffs")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.Staff.T_StatusHappyBirthDayStaff", "T_StatusHappyBirthDayStaffs")
                        .WithMany("T_HappyBirthdayStaffs")
                        .HasForeignKey("IsStatusSent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_StatusHappyBirthDayStaffs");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.User.T_BirthdayUser", b =>
                {
                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_BirthdayUseres")
                        .HasForeignKey("T_UsersIdUser");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.User.T_NotificationUser", b =>
                {
                    b.HasOne("DataTable.Table.User.T_DeleteNotification", "T_DeleteNotifications")
                        .WithMany("T_NotificationUsers")
                        .HasForeignKey("IdDeleteNotification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_User", "T_Users")
                        .WithMany("T_NotificationUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_ViewNotification", "T_ViewNotifications")
                        .WithMany("T_NotificationUsers")
                        .HasForeignKey("IdViewNotification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("T_DeleteNotifications");

                    b.Navigation("T_Users");

                    b.Navigation("T_ViewNotifications");
                });

            modelBuilder.Entity("DataTable.Table.User.T_User", b =>
                {
                    b.HasOne("DataTable.Table.Account.T_ActiverAccount", "T_ActiverAccounts")
                        .WithMany("T_Users")
                        .HasForeignKey("IdAccountActiver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.Address.T_City", "T_Citys")
                        .WithMany("T_Users")
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.Address.T_District", "T_Districts")
                        .WithMany("T_Users")
                        .HasForeignKey("IdDistrict")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.Gender.T_Gender", "T_Genders")
                        .WithMany("T_Users")
                        .HasForeignKey("IdGender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.User.T_LeverUser", "T_LeverUsers")
                        .WithMany("T_Users")
                        .HasForeignKey("IdLever")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.Marriage.T_Marriage", "T_Marriages")
                        .WithMany("T_Users")
                        .HasForeignKey("IdMarriage");

                    b.HasOne("DataTable.Table.User.T_StaffOrUser", "T_StaffOrUsers")
                        .WithMany("T_Users")
                        .HasForeignKey("IdStaffOrUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTable.Table.Staff.T_StatusStaffOff", "T_StatusStaffOffs")
                        .WithMany("T_Users")
                        .HasForeignKey("StatusStaffOff");

                    b.Navigation("T_ActiverAccounts");

                    b.Navigation("T_Citys");

                    b.Navigation("T_Districts");

                    b.Navigation("T_Genders");

                    b.Navigation("T_LeverUsers");

                    b.Navigation("T_Marriages");

                    b.Navigation("T_StaffOrUsers");

                    b.Navigation("T_StatusStaffOffs");
                });

            modelBuilder.Entity("DataTable.Table.Account.T_ActiverAccount", b =>
                {
                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Address.T_City", b =>
                {
                    b.Navigation("T_Districts");

                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Address.T_District", b =>
                {
                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Comment.T_CommentMusic", b =>
                {
                    b.Navigation("T_AnswerComments");
                });

            modelBuilder.Entity("DataTable.Table.Gender.T_Gender", b =>
                {
                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Marriage.T_Marriage", b =>
                {
                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.Music.T_Music", b =>
                {
                    b.Navigation("T_CommentMusics");

                    b.Navigation("T_DowloadMusics");

                    b.Navigation("T_FileMusics");

                    b.Navigation("T_ImageQRCores");

                    b.Navigation("T_LikeMusics");

                    b.Navigation("T_Ratings");
                });

            modelBuilder.Entity("DataTable.Table.Music.T_StatusMusic", b =>
                {
                    b.Navigation("T_Musics");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_ReadUser", b =>
                {
                    b.Navigation("T_AnswerRequests");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_ReceiveRequest", b =>
                {
                    b.Navigation("T_RequestPasswords");

                    b.Navigation("T_RequestUsers");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_RequestPassword", b =>
                {
                    b.Navigation("T_AnswerGmailRequestPasswords");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_RequestUser", b =>
                {
                    b.Navigation("T_AnswerRequests");
                });

            modelBuilder.Entity("DataTable.Table.RequestUser.T_TypeSentUser", b =>
                {
                    b.Navigation("T_AnswerRequests");
                });

            modelBuilder.Entity("DataTable.Table.Role.T_Role", b =>
                {
                    b.Navigation("T_UserRoles");
                });

            modelBuilder.Entity("DataTable.Table.Role.T_StatusRole", b =>
                {
                    b.Navigation("T_Roles");
                });

            modelBuilder.Entity("DataTable.Table.Saints.T_Saints", b =>
                {
                    b.Navigation("T_Musics");
                });

            modelBuilder.Entity("DataTable.Table.Saints.T_StatusSaints", b =>
                {
                    b.Navigation("T_Saintes");
                });

            modelBuilder.Entity("DataTable.Table.Season.T_Season", b =>
                {
                    b.Navigation("T_Musics");
                });

            modelBuilder.Entity("DataTable.Table.Season.T_StatusSeason", b =>
                {
                    b.Navigation("T_Seasons");
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_StatusHappyBirthDayStaff", b =>
                {
                    b.Navigation("T_HappyBirthdayStaffs");
                });

            modelBuilder.Entity("DataTable.Table.Staff.T_StatusStaffOff", b =>
                {
                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.User.T_DeleteNotification", b =>
                {
                    b.Navigation("T_NotificationUsers");
                });

            modelBuilder.Entity("DataTable.Table.User.T_LeverUser", b =>
                {
                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.User.T_StaffOrUser", b =>
                {
                    b.Navigation("T_Users");
                });

            modelBuilder.Entity("DataTable.Table.User.T_User", b =>
                {
                    b.Navigation("T_AnswerComments");

                    b.Navigation("T_AnswerRequests");

                    b.Navigation("T_BirthdayUseres");

                    b.Navigation("T_CommentMusics");

                    b.Navigation("T_HappyBirthdayStaffs");

                    b.Navigation("T_LikeMusics");

                    b.Navigation("T_Musics");

                    b.Navigation("T_NotificationUsers");

                    b.Navigation("T_Ratings");

                    b.Navigation("T_RequestUsers");

                    b.Navigation("T_UserRoles");
                });

            modelBuilder.Entity("DataTable.Table.User.T_ViewNotification", b =>
                {
                    b.Navigation("T_NotificationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
